我之前談到電腦打亂
最關鍵的反而是讓電腦能夠還原魔術方塊.
如果你用過 CSTimer 或其他的計時器
就知道他們能夠馬上給出 20 步的打亂
也就是你的電腦和手機能在一兩秒內
二十幾步就解好一顆方塊.
這是怎麼做到的?
這是靠著許多前輩跨世紀的努力累積起來
利用了數學群論和各種電腦科學的技巧
從 1980 年代的 Thistlethwaite 演算法
到 90 年代的 Kociemba 演算法
再加上其他人的改進和實作.
而現在，讓我從概念到細節
帶你了解 電腦如何還原魔術方塊.
要讓電腦解方塊
其中一個想法是
把人類使用的解法和公式寫成程式碼
教會電腦.
例如教電腦用 CFOP
讓電腦組十字，判斷各種 F2L 的情況
最後再套用 OLL PLL 公式.
不過這樣電腦就受到人類智慧的限制了
人類不懂的，電腦也不會.
例如 CFOP 解一顆方塊大概要 50 ~ 60 步
電腦照著用的話也要這麼多步.
不要忘了 我們的目標是二十幾步還原好
把人類這小腦袋直接搬到電腦上
並不會發揮到電腦的優勢.
電腦的優勢是什麼?
就是計算快、不會累.
所以有人想到 讓電腦一直轉魔方
像一個不懂的新手，讓他亂轉
嘗試錯誤，試過所有的轉法
直到不小心解好方塊為止.
這個，我們稱作「搜尋」
也就是電腦解方塊的方法.
怎麼可能只有這樣
我用一個比喻來解釋這會多複雜.
每次對方塊做一次的轉動
就像是往某個地方走一步
而要解好一顆魔術方塊
就是希望能走到終點
達到還原的狀態.
但問題是 路很複雜
而你不知道怎麼走
可以想成你現在在台南，要去台北101
光是第一步往哪走 就有很多可能
每種可能之後的第二步有更多組合
實在有太多太多的走法
而你不知道距離 101 還有多遠
就如同在黑暗裡探索一樣.
雖然電腦計算很快
但是魔術方塊亂轉的轉法更多.
就算電腦一秒鐘能夠轉一億次
要試完所有 10 步的轉法就要花一個小時
而更何況 10 步幾乎沒有辦法解好方塊.
如果事先把所有的解法都把它算出來
給電腦背答案呢？
硬碟和記憶體不是很大嗎!
很不幸的
三階方塊總共有四千萬兆種排列組合
如果每種狀況都要背起來的話
我們要用 一千萬顆硬碟!
亂轉搜尋會花太多的時間
但是如果照公式，轉法又太多步
究竟要怎麼在一兩秒內
就找到二十幾步的解法呢?
難道我們就此絕望了嗎?
不會的！
1992 年有一位德國的數學老師
Herbert Kociemba
發明了一套電腦演算法.
他還是讓電腦去亂轉
但是，是有策略的搜尋
用了很多技巧讓電腦有效率
最主要有兩個關鍵
「分段」和「剪枝」.
分段和剪枝 都是減少可能的轉法數量
讓電腦來得及搜尋完.
首先是「分段」
Kociemba 把還原魔方
分成兩個比較小的關卡，各個擊破
問題變小的話
解決其中一個花的步數會比較少
電腦亂轉搜尋的範圍不會太大.
我接下來要講的
並不是 Kociemba 實際的做法
不過為了大家理解方便
我用他的精神舉另外一個例子解釋
第一個關卡：專心先把下面兩層解好
第二個關卡：在不破壞下面兩層的情況下
把上面一層解好.
不但讓搜尋範圍變小了
還有一個優點是
第一個小問題解下面兩層的時候
黃色邊塊角塊是不用管的
所以有很多方塊的狀況
在這個小問題可以用同一種解法
要試的轉法就更少了.
不過實際上
Kociemba 並不是分成下兩層和上面一層
他分成哪兩個問題呢?
我之後解釋.
然後就算我們分成兩個小問題
每一個都還是很難啊！
就算分兩半
前面說過轉 10 步也要花一小時!
沒關係！
上天派了一位「剪枝小精靈」來幫助我們
如果我們走遠路的話
他會提醒我們.
這個小精靈很特別
他不知道正確的路怎麼走
但他會看風水
他知道在某個位置
最少要走幾步才能達到目標.
假設你的目標是走 300 公里以內到達台北
例如你走了 100 公里到了一個深山
這時候小精靈跟你說
你在這個地方
最起碼還要 250 公里才會到台北.
你就知道再怎麼樣都會超過 300
達不到目標
這條路不用繼續搜尋下去，重新找吧!
這就是剪枝
你能提早知道你走錯路
剪掉這個可能性
趕快回頭 就可以省下很多時間.
不過我說...
這剪枝小精靈不認得路的話
怎麼知道你還距離多少步呢?
一樣，讓我之後解釋.
影片前半段講的都是概念
從現在開始講講 Kociemba 實際的做法.
首先 Kociemba 是這樣分兩階段的
我用文字寫下來，可以暫停看一下
這是什麼意思呢?
Kociemba 的第一階段希望把方塊變得好看
像這樣子
頂面不是黃色就是白色
底面也是一樣只有黃白色
然後中間赤道這四顆邊塊的
色向, EO 是對的
也就是這兩面不是綠色就是藍色
這兩面不是紅色的話就是橘色.
只要方塊長得像這樣子的話
還原就可以只用
L2 R2 F2 B2
也就是前後左右一次轉 180 度
那只有 U 跟 D 是可以一次轉 90 度的
這個就是 Kociemba 第一階段想要達到的目標.
達到目標以後
第二階段再把這樣子的方塊
只用 L2 R2 F2 B2 和 U D 解好
像這樣子.
但為什麼 Kociemba
不分成 下面兩層+最後一層呢?
看起來 Kociemba 剛剛第一階段
他甚至沒有解掉任何一塊啊!
我前面舉例的這種分層法在下面兩層解好
進入第二個階段以後
其實問題並沒有變得比較簡單.
因為你一旦要開始解這第三層
你一定會先破壞掉下面兩層
就算最後解好了以後
中間一定會有一段時間
下面兩層是壞的.
也就是：你好不容易進到台北市了
結果 你為了要解上面這一層
你又必須破壞它
又走出來
重新回到第一階段
重新找路
因為下面兩層被破壞掉了
為了再還原
你仍然要隨時追蹤
下面這兩層的邊塊角塊在哪裡
而且你還是要同時去追蹤
這上面黃色第三層邊角
這幾乎就是整顆方塊了.
所以用 CFOP 分層，在第二階段還是難.
回頭過來看 Kociemba 兩階段的定義
首先第一階段完畢
開始進行第二階段以後
需要嘗試的轉動變少了
每一步從 18 種可能降低成 10 種可能.
再來，根據第二階段本身的定義
無論怎麼搜尋亂轉
方塊還是會屬於第二階段
不會有進去以後又出來的狀況.
最後，這種定義
讓我們能夠在不同階段關心不同的特性
各個擊破.
例如對於角塊，
第一階段只要在意白色或黃色方向
本身是哪顆角塊不重要
進入第二階段後反過來，
不用追蹤白黃的色向
因為一旦白黃朝上或朝下後
R2 L2 F2 B2 都不會改變其色向
所以只要追蹤位置就好
對於邊塊也是類似的道理.
所以 Kociemba 的兩階段搜尋
真的把問題切得更小
讓電腦搜尋的負擔變少了.
「分段」這個概念並不是 Kociemba 首創的
在 1981 年有一位
數學教授 Morwen Thistlethwaite
利用了數學的群論
分解成四個小問題
並在當時證明了任何打亂
都能在 52 步內還原.
就是 Thistlethwaite 的分群方法
啟發了 Kociemba 的兩階段搜尋法
Kociemba 的確把還原魔方.
分成了兩個比較小的問題了
不過這兩個都還是滿複雜的啊！
對於每一個小問題
電腦究竟怎麼搜尋呢?
首先有個心態是：我們不是找「最少步」
只要「夠少步」就好.
先定個預算
例如第二階段 15 步以內達到目標
電腦從起點亂試一步、再一步
利用前面提到的「剪枝」
如果亂轉到某個狀態後
距離目標太遠太多步的話
就放棄這一步
Undo 復原回到上一步
改試其他的可能.
但是剪枝小精靈究竟怎麼知道離目標還多遠呢？
答案是「倒著走迷宮」
我們不看起點
我們從終點、從目標往回推
把亂轉一步變成的方塊 背起來
所以這些狀態走一步以後 就能到目標
接下來再從這些「一步到目標」的狀態
再亂轉一步
這些就是「兩步能到目標」的狀態
就這樣逐步、逐步
從學過的狀態轉過所有可能的轉動
然後背起來「最少要幾步」.
有點類似像感染一樣
藉由散播和感染源
來知道這個狀態要花幾步能到達目標.
等一下！
如果我們真的能夠背答案的話
那不就代表我們可以用同樣的方法
從起點 找路到達終點嗎！？
影片前面說的一千萬顆硬碟呢?
沒錯！單純這樣感染 會有太多的狀態要記
記不完的.
不過 剪枝是告訴我們「起碼」要多少步到目標
減低冤枉路的機會
並不是完全阻止
所以他不用估計得很精確
只要給下界就好.
因為只是估計下界
所以至少有兩種技巧可以用
最簡單的技巧是，感染到某個步數以上
例如 9 步以後
剩下沒回推的就不管了
直接說這些狀態「起碼要 10 步」.
而另一種技巧是 再把魔方分成不同的部分
例如分成邊塊和角塊
那在推導剪枝感染的路途中
假裝魔方只有角塊 不管邊塊
這大大減少要記憶的組合
所以電腦也可以背得起來.
而同時這也是合理的下界估計：
解好方塊要同時解好角塊和邊塊
如果解好角塊的部分要花 6 步的話
就表示解好整顆方塊至少要 6 步
無論邊塊的狀態是怎麼樣.
這種技巧就是 再把問題再變得更小
只不過只運用在剪枝而已
搜尋還是照常.
Kociemba 利用了兩階段搜尋和剪枝
大大減少了電腦搜尋所需要的時間.
不過到台北市最短的路線
不一定是到 101 最短的
有可能你花了 8 步解好第一階段
結果接下來 起碼要花 15 步才能解好方塊
8+15 就已經超過 21 步的預算了.
這時候 電腦會試著在第一階段多走幾步
藉由不斷放鬆對於第一階段的要求
來找到兩階段整體更短的解法
表面上看起來是做了更多次的搜尋
但讓人驚訝的是對於大部分的打亂
電腦都能夠用這樣的策略
在數秒內找到 21 步
甚至是更短的解法.
Kociemba 演算法除了二階段和剪枝以外
還有很多不可或缺的技巧
利用電腦科學的技巧
再加上後續
像是數學家 Michael Reid 等人的改進
變成了現今大家所使用的程式.
除此之外
Kociemba 演算法更是 21 世紀初
尋找上帝之數不可或缺的基礎
最終 Tomas Rokicki 等四人小組
以此證明了所有 3x3 魔術方塊的打亂
都可以在 20 步以內還原.
前面說過，單純把人類的解法教給電腦
只是限制了電腦的能力
但最後，也是人類的智慧
善用了電腦的優勢
兩者結合
最後達到卓越的成果
這，就是電腦如何解魔術方塊
